@page "/journal"
@using DLPFinalProjectIdea.Models
@using System.Collections.Generic;
@inject IJSRuntime JS

<div class="hero-section">
    <div class="hero-content">
    </div>
</div>

<div class="question-box">
    <p><strong>Today's Prompt:</strong> @currentQuestion</p>
</div>

<div class="entry-form">
    <input @bind="newEntry.Title" placeholder="Title" />
    <textarea @bind="newEntry.Content" placeholder="Your thoughts..." rows="5"></textarea>
    <input @bind="newEntry.Keyword" placeholder="Add Keywords (Vulnerability, Attack Types etc) comma-separtes keywords" />
    <button @onclick="AddEntry">Add Entry</button>
</div>

<div class="entry-list">
    @foreach (var entry in journalEntries)
    {
        <div class="entry-item">
            <strong>@entry.Title</strong> <em>(@entry.Created.ToShortDateString())</em>
            <p>@entry.Content</p>
        </div>
    }
</div>

<h4>Keyword Word Cloud</h4>
<canvas id="wordCloudCanvas" width="600" height="400"></canvas>



@code {
    private Dictionary<string, int> keywordFrequency = new();       
    private void UpdateKeywordFrequency()
    {
        keywordFrequency.Clear();   

        foreach (var entry in journalEntries)
        {
            if (string.IsNullOrWhiteSpace(entry.Keyword)) continue;     // Skip entries without any keyword

            var keywords = entry.Keyword.Split(',', StringSplitOptions.RemoveEmptyEntries);     // spliting each keyword with the comma ","

            foreach (var keyword in keywords)
            {
                var trimmed = keyword.Trim().ToLower();
                if (string.IsNullOrWhiteSpace(trimmed)) continue; // Prevent empty ones

                if (keywordFrequency.ContainsKey(trimmed))      // count for each keyword
                    keywordFrequency[trimmed]++;
                else
                    keywordFrequency[trimmed] = 1;
            }
        }
    }



    private List<JournalEntry> journalEntries = new();
    private JournalEntry newEntry = new();

    private string currentQuestion = "";
    private List<string> questions = new()      // Questions for the Journal Entries
    {
        "What did you learn about cybersecurity today?",
        "Did you notice any potential security risks?",
        "What would you do differently to stay safer online?",
        "What was today's biggest cybersecurity news?"
    };

    protected override void OnInitialized()         // Randomizes the question for the Journal
    {
        var random = new Random();
        int index = random.Next(questions.Count);
        currentQuestion = questions[index];
    }

    private async Task AddEntry()
    {
        foreach (var kvp in keywordFrequency)
        {
            Console.WriteLine($"[C#] Keyword: {kvp.Key}, Count: {kvp.Value}");      // Using it to debug in terminal
        }

        
        var entryToAdd = new JournalEntry
        {
            Title = newEntry.Title,
            Content = newEntry.Content,
            Keyword = newEntry.Keyword,
            Created = DateTime.Now
        };

        journalEntries.Add(entryToAdd); 
        newEntry = new JournalEntry();      // Clear the journal entry

        UpdateKeywordFrequency();   // Recalculate keyword count for JS

        var wordData = keywordFrequency     // Prepare formatted array of keyword-frequency pairs
            .Where(kvp => !string.IsNullOrWhiteSpace(kvp.Key))
            .Select(kvp => new object[] { kvp.Key, kvp.Value })
            .ToArray();

        await JS.InvokeVoidAsync("renderWordCloud", new object[] { wordData }); // Send to JavaScript


    }



    }
}
